# coding: utf-8

from __future__ import absolute_import
from datetime import date, datetime  # noqa: F401

from typing import List, Dict  # noqa: F401

from morfinator_api.models.base_model_ import Model
from morfinator_api.models.ingredient import Ingredient
from morfinator_api import util


class Meal(Model):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    def __init__(self, id: int=None, name: str=None, food_type: str=None, dish_type: str=None, image: str=None, ingredients: Ingredient=None, recipe: str=None, difficulty: int=None, time: int=None, tags: List[str]=None):  # noqa: E501
        """Meal - a model defined in Swagger

        :param id: The id of this Meal.  # noqa: E501
        :type id: int
        :param name: The name of this Meal.  # noqa: E501
        :type name: str
        :param food_type: The food_type of this Meal.  # noqa: E501
        :type food_type: str
        :param dish_type: The dish_type of this Meal.  # noqa: E501
        :type dish_type: str
        :param image: The image of this Meal.  # noqa: E501
        :type image: str
        :param ingredients: The ingredients of this Meal.  # noqa: E501
        :type ingredients: Ingredient
        :param recipe: The recipe of this Meal.  # noqa: E501
        :type recipe: str
        :param difficulty: The difficulty of this Meal.  # noqa: E501
        :type difficulty: int
        :param time: The time of this Meal.  # noqa: E501
        :type time: int
        :param tags: The tags of this Meal.  # noqa: E501
        :type tags: List[str]
        """
        self.swagger_types = {
            'id': int,
            'name': str,
            'food_type': str,
            'dish_type': str,
            'image': str,
            'ingredients': Ingredient,
            'recipe': str,
            'difficulty': int,
            'time': int,
            'tags': List[str]
        }

        self.attribute_map = {
            'id': 'id',
            'name': 'name',
            'food_type': 'food_type',
            'dish_type': 'dish_type',
            'image': 'image',
            'ingredients': 'ingredients',
            'recipe': 'recipe',
            'difficulty': 'difficulty',
            'time': 'time',
            'tags': 'tags'
        }

        self._id = id
        self._name = name
        self._food_type = food_type
        self._dish_type = dish_type
        self._image = image
        self._ingredients = ingredients
        self._recipe = recipe
        self._difficulty = difficulty
        self._time = time
        self._tags = tags

    @classmethod
    def from_dict(cls, dikt) -> 'Meal':
        """Returns the dict as a model

        :param dikt: A dict.
        :type: dict
        :return: The Meal of this Meal.  # noqa: E501
        :rtype: Meal
        """
        return util.deserialize_model(dikt, cls)

    @property
    def id(self) -> int:
        """Gets the id of this Meal.


        :return: The id of this Meal.
        :rtype: int
        """
        return self._id

    @id.setter
    def id(self, id: int):
        """Sets the id of this Meal.


        :param id: The id of this Meal.
        :type id: int
        """

        self._id = id

    @property
    def name(self) -> str:
        """Gets the name of this Meal.


        :return: The name of this Meal.
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name: str):
        """Sets the name of this Meal.


        :param name: The name of this Meal.
        :type name: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def food_type(self) -> str:
        """Gets the food_type of this Meal.


        :return: The food_type of this Meal.
        :rtype: str
        """
        return self._food_type

    @food_type.setter
    def food_type(self, food_type: str):
        """Sets the food_type of this Meal.


        :param food_type: The food_type of this Meal.
        :type food_type: str
        """
        if food_type is None:
            raise ValueError("Invalid value for `food_type`, must not be `None`")  # noqa: E501

        self._food_type = food_type

    @property
    def dish_type(self) -> str:
        """Gets the dish_type of this Meal.

        Tipo de plato  # noqa: E501

        :return: The dish_type of this Meal.
        :rtype: str
        """
        return self._dish_type

    @dish_type.setter
    def dish_type(self, dish_type: str):
        """Sets the dish_type of this Meal.

        Tipo de plato  # noqa: E501

        :param dish_type: The dish_type of this Meal.
        :type dish_type: str
        """
        allowed_values = ["desayuno", "almuerzo", "merienda", "cena"]  # noqa: E501
        if dish_type not in allowed_values:
            raise ValueError(
                "Invalid value for `dish_type` ({0}), must be one of {1}"
                .format(dish_type, allowed_values)
            )

        self._dish_type = dish_type

    @property
    def image(self) -> str:
        """Gets the image of this Meal.


        :return: The image of this Meal.
        :rtype: str
        """
        return self._image

    @image.setter
    def image(self, image: str):
        """Sets the image of this Meal.


        :param image: The image of this Meal.
        :type image: str
        """
        if image is None:
            raise ValueError("Invalid value for `image`, must not be `None`")  # noqa: E501

        self._image = image

    @property
    def ingredients(self) -> Ingredient:
        """Gets the ingredients of this Meal.


        :return: The ingredients of this Meal.
        :rtype: Ingredient
        """
        return self._ingredients

    @ingredients.setter
    def ingredients(self, ingredients: Ingredient):
        """Sets the ingredients of this Meal.


        :param ingredients: The ingredients of this Meal.
        :type ingredients: Ingredient
        """

        self._ingredients = ingredients

    @property
    def recipe(self) -> str:
        """Gets the recipe of this Meal.


        :return: The recipe of this Meal.
        :rtype: str
        """
        return self._recipe

    @recipe.setter
    def recipe(self, recipe: str):
        """Sets the recipe of this Meal.


        :param recipe: The recipe of this Meal.
        :type recipe: str
        """

        self._recipe = recipe

    @property
    def difficulty(self) -> int:
        """Gets the difficulty of this Meal.


        :return: The difficulty of this Meal.
        :rtype: int
        """
        return self._difficulty

    @difficulty.setter
    def difficulty(self, difficulty: int):
        """Sets the difficulty of this Meal.


        :param difficulty: The difficulty of this Meal.
        :type difficulty: int
        """

        self._difficulty = difficulty

    @property
    def time(self) -> int:
        """Gets the time of this Meal.


        :return: The time of this Meal.
        :rtype: int
        """
        return self._time

    @time.setter
    def time(self, time: int):
        """Sets the time of this Meal.


        :param time: The time of this Meal.
        :type time: int
        """

        self._time = time

    @property
    def tags(self) -> List[str]:
        """Gets the tags of this Meal.


        :return: The tags of this Meal.
        :rtype: List[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags: List[str]):
        """Sets the tags of this Meal.


        :param tags: The tags of this Meal.
        :type tags: List[str]
        """

        self._tags = tags
